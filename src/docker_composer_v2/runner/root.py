# DO NOT EDIT: Autogenerated by /Users/jensen/kairos/docker-composer-v2/src/docker_composer_v2/_utils/generate_class.py
# for Docker Compose version v2.17.2

from typing import List, Optional

import attr

import docker_composer_v2.runner.cmd.build
import docker_composer_v2.runner.cmd.config
import docker_composer_v2.runner.cmd.cp
import docker_composer_v2.runner.cmd.create
import docker_composer_v2.runner.cmd.down
import docker_composer_v2.runner.cmd.events
import docker_composer_v2.runner.cmd.exec
import docker_composer_v2.runner.cmd.images
import docker_composer_v2.runner.cmd.kill
import docker_composer_v2.runner.cmd.logs
import docker_composer_v2.runner.cmd.ls
import docker_composer_v2.runner.cmd.pause
import docker_composer_v2.runner.cmd.port
import docker_composer_v2.runner.cmd.ps
import docker_composer_v2.runner.cmd.pull
import docker_composer_v2.runner.cmd.push
import docker_composer_v2.runner.cmd.restart
import docker_composer_v2.runner.cmd.rm
import docker_composer_v2.runner.cmd.run
import docker_composer_v2.runner.cmd.start
import docker_composer_v2.runner.cmd.stop
import docker_composer_v2.runner.cmd.top
import docker_composer_v2.runner.cmd.unpause
import docker_composer_v2.runner.cmd.up
import docker_composer_v2.runner.cmd.version
from docker_composer_v2.base import DockerBaseRunner


@attr.s(auto_attribs=True)
class DockerComposeRoot(DockerBaseRunner):
    """

    Usage:  docker compose [OPTIONS] COMMAND

    Docker Compose

    """

    ansi: Optional[str] = None
    """Control when to print ANSI control"""
    compatibility: Optional[bool] = None
    """Run compose in backward compatibility mode"""
    file: Optional[str] = None
    """Compose configuration files"""
    parallel: Optional[int] = None
    """Control max parallelism, -1 for"""
    profile: Optional[str] = None
    """Specify a profile to enable"""
    project_directory: Optional[str] = None
    """Specify an alternate working directory"""
    project_name: Optional[str] = None
    """Project name"""
    _cmd: str = ""
    _options: List[str] = [
        "compatibility",
    ]

    def build(
        self,
        no_cache: Optional[bool] = None,
        progress: Optional[str] = None,
        pull: Optional[bool] = None,
        quiet: Optional[bool] = None,
        ssh: Optional[str] = None,
    ) -> docker_composer_v2.runner.cmd.build.DockerComposeBuild:
        """

        Usage:  docker compose build [OPTIONS] [SERVICE...]

        Build or rebuild services


        :param no_cache: Do not use cache when building the image
        :param progress: Set type of progress output (auto, tty,
        :param pull: Always attempt to pull a newer version of
        :param quiet: Don't print anything to STDOUT
        :param ssh: Set SSH authentications used when
        """
        runner = docker_composer_v2.runner.cmd.build.DockerComposeBuild(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def config(
        self,
        no_consistency: Optional[bool] = None,
        output: Optional[str] = None,
        quiet: Optional[bool] = None,
    ) -> docker_composer_v2.runner.cmd.config.DockerComposeConfig:
        """

        Usage:  docker compose config [OPTIONS] [SERVICE...]

        Parse, resolve and render compose file in canonical format


        :param no_consistency: Don't check model consistency - warning:
        :param output: Save to file (default to stdout)
        :param quiet: Only validate the configuration, don't
        """
        runner = docker_composer_v2.runner.cmd.config.DockerComposeConfig(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def cp(
        self,
        archive: Optional[bool] = None,
        follow_link: Optional[bool] = None,
        index: Optional[int] = None,
    ) -> docker_composer_v2.runner.cmd.cp.DockerComposeCp:
        """

        Usage:  docker compose cp [OPTIONS] SERVICE:SRC_PATH DEST_PATH|-
                docker compose cp [OPTIONS] SRC_PATH|- SERVICE:DEST_PATH

        Copy files/folders between a service container and the local filesystem


        :param archive: Archive mode (copy all uid/gid information)
        :param follow_link: Always follow symbol link in SRC_PATH
        :param index: Index of the container if there are multiple
        """
        runner = docker_composer_v2.runner.cmd.cp.DockerComposeCp(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def create(
        self,
        force_recreate: Optional[bool] = None,
        no_recreate: Optional[bool] = None,
        pull: Optional[str] = None,
        remove_orphans: Optional[bool] = None,
    ) -> docker_composer_v2.runner.cmd.create.DockerComposeCreate:
        """

        Usage:  docker compose create [OPTIONS] [SERVICE...]

        Creates containers for a service.


        :param force_recreate: Recreate containers even if their configuration
        :param no_recreate: If containers already exist, don't recreate
        :param pull: Pull image before running
        :param remove_orphans: Remove containers for services not defined in
        """
        runner = docker_composer_v2.runner.cmd.create.DockerComposeCreate(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def down(
        self,
        remove_orphans: Optional[bool] = None,
        timeout: Optional[int] = None,
        volumes: Optional[str] = None,
    ) -> docker_composer_v2.runner.cmd.down.DockerComposeDown:
        """

        Usage:  docker compose down [OPTIONS]

        Stop and remove containers, networks


        :param remove_orphans: Remove containers for services not defined in
        :param timeout: Specify a shutdown timeout in seconds (default 10)
        :param volumes: Remove named volumes declared in the volumes
        """
        runner = docker_composer_v2.runner.cmd.down.DockerComposeDown(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def events(
        self, json: Optional[bool] = None
    ) -> docker_composer_v2.runner.cmd.events.DockerComposeEvents:
        """

        Usage:  docker compose events [OPTIONS] [SERVICE...]

        Receive real time events from containers.


        :param json: Output events as a stream of json objects
        """
        runner = docker_composer_v2.runner.cmd.events.DockerComposeEvents(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def exec(
        self,
        detach: Optional[bool] = None,
        env: Optional[str] = None,
        index: Optional[int] = None,
        workdir: Optional[str] = None,
    ) -> docker_composer_v2.runner.cmd.exec.DockerComposeExec:
        """

        Usage:  docker compose exec [OPTIONS] SERVICE COMMAND [ARGS...]

        Execute a command in a running container.


        :param detach: Detached mode: Run command in the
        :param env: Set environment variables
        :param index: index of the container if there are
        :param workdir: Path to workdir directory for this
        """
        runner = docker_composer_v2.runner.cmd.exec.DockerComposeExec(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def images(
        self, quiet: Optional[bool] = None
    ) -> docker_composer_v2.runner.cmd.images.DockerComposeImages:
        """

        Usage:  docker compose images [OPTIONS] [SERVICE...]

        List images used by the created containers


        :param quiet: Only display IDs
        """
        runner = docker_composer_v2.runner.cmd.images.DockerComposeImages(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def kill(
        self, remove_orphans: Optional[bool] = None
    ) -> docker_composer_v2.runner.cmd.kill.DockerComposeKill:
        """

        Usage:  docker compose kill [OPTIONS] [SERVICE...]

        Force stop service containers.


        :param remove_orphans: Remove containers for services not defined in
        """
        runner = docker_composer_v2.runner.cmd.kill.DockerComposeKill(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def logs(
        self, tail: Optional[str] = None
    ) -> docker_composer_v2.runner.cmd.logs.DockerComposeLogs:
        """

        Usage:  docker compose logs [OPTIONS] [SERVICE...]

        View output from containers


        :param tail: Number of lines to show from the end of the logs
        """
        runner = docker_composer_v2.runner.cmd.logs.DockerComposeLogs(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def ls(
        self, all: Optional[bool] = None
    ) -> docker_composer_v2.runner.cmd.ls.DockerComposeLs:
        """

        Usage:  docker compose ls [OPTIONS]

        List running compose projects


        :param all: Show all stopped Compose projects
        """
        runner = docker_composer_v2.runner.cmd.ls.DockerComposeLs(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def pause(
        self,
    ) -> docker_composer_v2.runner.cmd.pause.DockerComposePause:
        """

        Usage:  docker compose pause [SERVICE...]

        Pause services



        """
        runner = docker_composer_v2.runner.cmd.pause.DockerComposePause(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def port(
        self, index: Optional[int] = None, protocol: Optional[str] = None
    ) -> docker_composer_v2.runner.cmd.port.DockerComposePort:
        """

        Usage:  docker compose port [OPTIONS] SERVICE PRIVATE_PORT

        Print the public port for a port binding.


        :param index: index of the container if service has multiple
        :param protocol: tcp or udp (default "tcp")
        """
        runner = docker_composer_v2.runner.cmd.port.DockerComposePort(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def ps(
        self,
        all: Optional[bool] = None,
        filter: Optional[str] = None,
        quiet: Optional[bool] = None,
        services: Optional[bool] = None,
    ) -> docker_composer_v2.runner.cmd.ps.DockerComposePs:
        """

        Usage:  docker compose ps [OPTIONS] [SERVICE...]

        List containers


        :param all: Show all stopped containers (including those
        :param filter: Filter services by a property (supported
        :param quiet: Only display IDs
        :param services: Display services
        """
        runner = docker_composer_v2.runner.cmd.ps.DockerComposePs(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def pull(
        self, ignore_pull_failures: Optional[bool] = None
    ) -> docker_composer_v2.runner.cmd.pull.DockerComposePull:
        """

        Usage:  docker compose pull [OPTIONS] [SERVICE...]

        Pull service images


        :param ignore_pull_failures: Pull what it can and ignores images with
        """
        runner = docker_composer_v2.runner.cmd.pull.DockerComposePull(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def push(
        self,
        ignore_push_failures: Optional[bool] = None,
        include_deps: Optional[bool] = None,
        quiet: Optional[bool] = None,
    ) -> docker_composer_v2.runner.cmd.push.DockerComposePush:
        """

        Usage:  docker compose push [OPTIONS] [SERVICE...]

        Push service images


        :param ignore_push_failures: Push what it can and ignores images with
        :param include_deps: Also push images of services declared as
        :param quiet: Push without printing progress information
        """
        runner = docker_composer_v2.runner.cmd.push.DockerComposePush(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def restart(
        self, timeout: Optional[int] = None
    ) -> docker_composer_v2.runner.cmd.restart.DockerComposeRestart:
        """

        Usage:  docker compose restart [OPTIONS] [SERVICE...]

        Restart service containers


        :param timeout: Specify a shutdown timeout in seconds (default 10)
        """
        runner = docker_composer_v2.runner.cmd.restart.DockerComposeRestart(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def rm(
        self,
        force: Optional[bool] = None,
        stop: Optional[bool] = None,
        volumes: Optional[bool] = None,
    ) -> docker_composer_v2.runner.cmd.rm.DockerComposeRm:
        """

        Usage:  docker compose rm [OPTIONS] [SERVICE...]

        Removes stopped service containers

        By default, anonymous volumes attached to containers will not be removed. You
        can override this with -v. To list all volumes, use "docker volume ls".

        Any data which is not in a volume will be lost.


        :param force: Don't ask to confirm removal
        :param stop: Stop the containers, if required, before removing
        :param volumes: Remove any anonymous volumes attached to containers
        """
        runner = docker_composer_v2.runner.cmd.rm.DockerComposeRm(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def run(
        self,
        detach: Optional[bool] = None,
        entrypoint: Optional[str] = None,
        env: Optional[str] = None,
        label: Optional[str] = None,
        name: Optional[str] = None,
        no_TTY: Optional[bool] = None,
        remove_orphans: Optional[bool] = None,
        rm: Optional[bool] = None,
        service_ports: Optional[bool] = None,
        use_aliases: Optional[bool] = None,
        user: Optional[str] = None,
        workdir: Optional[str] = None,
    ) -> docker_composer_v2.runner.cmd.run.DockerComposeRun:
        """

        Usage:  docker compose run [OPTIONS] SERVICE [COMMAND] [ARGS...]

        Run a one-off command on a service.


        :param detach: Run container in background and print
        :param entrypoint: Override the entrypoint of the image
        :param env: Set environment variables
        :param label: Add or override a label
        :param name: Assign a name to the container
        :param no_TTY: Disable pseudo-TTY allocation (default:
        :param remove_orphans: Remove containers for services not defined
        :param rm: Automatically remove the container when it exits
        :param service_ports: Run command with the service's ports
        :param use_aliases: Use the service's network useAliases in the
        :param user: Run as specified username or uid
        :param workdir: Working directory inside the container
        """
        runner = docker_composer_v2.runner.cmd.run.DockerComposeRun(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def start(
        self,
    ) -> docker_composer_v2.runner.cmd.start.DockerComposeStart:
        """

        Usage:  docker compose start [SERVICE...]

        Start services



        """
        runner = docker_composer_v2.runner.cmd.start.DockerComposeStart(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def stop(
        self, timeout: Optional[int] = None
    ) -> docker_composer_v2.runner.cmd.stop.DockerComposeStop:
        """

        Usage:  docker compose stop [OPTIONS] [SERVICE...]

        Stop services


        :param timeout: Specify a shutdown timeout in seconds (default 10)
        """
        runner = docker_composer_v2.runner.cmd.stop.DockerComposeStop(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def top(
        self,
    ) -> docker_composer_v2.runner.cmd.top.DockerComposeTop:
        """

        Usage:  docker compose top [SERVICES...]

        Display the running processes



        """
        runner = docker_composer_v2.runner.cmd.top.DockerComposeTop(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def unpause(
        self,
    ) -> docker_composer_v2.runner.cmd.unpause.DockerComposeUnpause:
        """

        Usage:  docker compose unpause [SERVICE...]

        Unpause services



        """
        runner = docker_composer_v2.runner.cmd.unpause.DockerComposeUnpause(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def up(
        self,
        abort_on_container_exit: Optional[bool] = None,
        detach: Optional[bool] = None,
        exit_code_from: Optional[str] = None,
        abort_on_container_exit: Optional[bool] = None,
        force_recreate: Optional[bool] = None,
        no_recreate: Optional[bool] = None,
        no_start: Optional[bool] = None,
        pull: Optional[str] = None,
        remove_orphans: Optional[bool] = None,
        renew_anon_volumes: Optional[bool] = None,
        wait: Optional[bool] = None,
        wait_timeout: Optional[int] = None,
        waitTimeout: Optional[int] = None,
    ) -> docker_composer_v2.runner.cmd.up.DockerComposeUp:
        """

        Usage:  docker compose up [OPTIONS] [SERVICE...]

        Create and start containers


        :param abort_on_container_exit: Stops all containers if any container
        :param detach: Detached mode: Run containers in the
        :param exit_code_from: Return the exit code of the selected
        :param abort_on_container_exit:
        :param force_recreate: Recreate containers even if their
        :param no_recreate: If containers already exist, don't
        :param no_start: Don't start the services after creating
        :param pull: Pull image before running
        :param remove_orphans: Remove containers for services not
        :param renew_anon_volumes: Recreate anonymous volumes instead of
        :param wait: Wait for services to be
        :param wait_timeout: timeout waiting for application to be
        :param waitTimeout: Use this waitTimeout in seconds for
        """
        runner = docker_composer_v2.runner.cmd.up.DockerComposeUp(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def version(
        self,
    ) -> docker_composer_v2.runner.cmd.version.DockerComposeVersion:
        """

        Usage:  docker compose version [OPTIONS]

        Show the Docker Compose version information



        """
        runner = docker_composer_v2.runner.cmd.version.DockerComposeVersion(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner
