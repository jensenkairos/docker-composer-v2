# DO NOT EDIT: Autogenerated by /Users/jensen/kairos/docker-composer/src/docker_composer/_utils/generate_class.py
# for Docker Compose version v2.17.2

from typing import List, Optional

import attr

import docker_composer.runner.cmd.build
import docker_composer.runner.cmd.config
import docker_composer.runner.cmd.cp
import docker_composer.runner.cmd.create
import docker_composer.runner.cmd.down
import docker_composer.runner.cmd.events
import docker_composer.runner.cmd.exec
import docker_composer.runner.cmd.images
import docker_composer.runner.cmd.kill
import docker_composer.runner.cmd.logs
import docker_composer.runner.cmd.ls
import docker_composer.runner.cmd.pause
import docker_composer.runner.cmd.port
import docker_composer.runner.cmd.ps
import docker_composer.runner.cmd.pull
import docker_composer.runner.cmd.push
import docker_composer.runner.cmd.restart
import docker_composer.runner.cmd.rm
import docker_composer.runner.cmd.run
import docker_composer.runner.cmd.start
import docker_composer.runner.cmd.stop
import docker_composer.runner.cmd.top
import docker_composer.runner.cmd.unpause
import docker_composer.runner.cmd.up
import docker_composer.runner.cmd.version
from docker_composer_v2.base import DockerBaseRunner


@attr.s(auto_attribs=True)
class DockerComposeRoot(DockerBaseRunner):
    """

    Usage:  docker compose [OPTIONS] COMMAND

    Docker Compose

    """

    ansi: Optional[str] = None
    """Control when to print ANSI control
       characters ("never"|"always"|"auto")
       (default "auto")
       --compatibility              Run compose in backward compatibility mode
       --env-file stringArray       Specify an alternate environment file."""
    file: Optional[str] = None
    """Compose configuration files
       --parallel int               Control max parallelism, -1 for
       unlimited (default -1)
       --profile stringArray        Specify a profile to enable
       --project-directory string   Specify an alternate working directory
       (default: the path of the, first
       specified, Compose file)"""
    project_name: Optional[str] = None
    """Project name"""
    _cmd: str = ""
    _options: List[str] = []

    def build(
        self, build_arg: Optional[str] = None, quiet: Optional[bool] = None
    ) -> docker_composer.runner.cmd.build.DockerComposeBuild:
        """

        Usage:  docker compose build [OPTIONS] [SERVICE...]

        Build or rebuild services


        :param build_arg: Set build-time variables for services.
           --no-cache                Do not use cache when building the image
           --progress string         Set type of progress output (auto, tty,
           plain, quiet) (default "auto")
           --pull                    Always attempt to pull a newer version of
           the image.
           --push                    Push service images.
        :param quiet: Don't print anything to STDOUT
           --ssh string              Set SSH authentications used when
           building service images. (use 'default'
           for using your default SSH Agent)
        """
        runner = docker_composer.runner.cmd.build.DockerComposeBuild(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def config(
        self,
        format: Optional[str] = None,
        output: Optional[str] = None,
        quiet: Optional[bool] = None,
    ) -> docker_composer.runner.cmd.config.DockerComposeConfig:
        """

        Usage:  docker compose config [OPTIONS] [SERVICE...]

        Parse, resolve and render compose file in canonical format


        :param format: Format the output. Values: [yaml | json]
           (default "yaml")
           --hash string             Print the service config hash, one per line.
           --images                  Print the image names, one per line.
           --no-consistency          Don't check model consistency - warning:
           may produce invalid Compose output
           --no-interpolate          Don't interpolate environment variables.
           --no-normalize            Don't normalize compose model.
        :param output: Save to file (default to stdout)
           --profiles                Print the profile names, one per line.
        :param quiet: Only validate the configuration, don't
           print anything.
           --resolve-image-digests   Pin image tags to digests.
           --services                Print the service names, one per line.
           --volumes                 Print the volume names, one per line.
        """
        runner = docker_composer.runner.cmd.config.DockerComposeConfig(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def cp(
        self, archive: Optional[bool] = None, follow_link: Optional[bool] = None
    ) -> docker_composer.runner.cmd.cp.DockerComposeCp:
        """

        Usage:  docker compose cp [OPTIONS] SERVICE:SRC_PATH DEST_PATH|-
                docker compose cp [OPTIONS] SRC_PATH|- SERVICE:DEST_PATH

        Copy files/folders between a service container and the local filesystem


        :param archive: Archive mode (copy all uid/gid information)
        :param follow_link: Always follow symbol link in SRC_PATH
           --index int     Index of the container if there are multiple
           instances of a service .
        """
        runner = docker_composer.runner.cmd.cp.DockerComposeCp(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def create(
        self, build: Optional[bool] = None
    ) -> docker_composer.runner.cmd.create.DockerComposeCreate:
        """

        Usage:  docker compose create [OPTIONS] [SERVICE...]

        Creates containers for a service.


        :param build: Build images before starting containers.
           --force-recreate   Recreate containers even if their configuration
           and image haven't changed.
           --no-build         Don't build an image, even if it's missing.
           --no-recreate      If containers already exist, don't recreate
           them. Incompatible with --force-recreate.
           --pull string      Pull image before running
           ("always"|"missing"|"never") (default "missing")
           --remove-orphans   Remove containers for services not defined in
           the Compose file.
           --scale scale      Scale SERVICE to NUM instances. Overrides the
           scale setting in the Compose file if present.
        """
        runner = docker_composer.runner.cmd.create.DockerComposeCreate(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def down(
        self,
        remove_orphans: Optional[bool] = None,
        timeout: Optional[int] = None,
        volumes: Optional[str] = None,
    ) -> docker_composer.runner.cmd.down.DockerComposeDown:
        """

        Usage:  docker compose down [OPTIONS]

        Stop and remove containers, networks


        :param remove_orphans: Remove containers for services not defined in
           the Compose file.
           --rmi string        Remove images used by services. "local" remove
           only images that don't have a custom tag
           ("local"|"all")
        :param timeout: Specify a shutdown timeout in seconds (default 10)
        :param volumes: Remove named volumes declared in the volumes
           section of the Compose file and anonymous
           volumes attached to containers.
        """
        runner = docker_composer.runner.cmd.down.DockerComposeDown(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def events(
        self, json: Optional[bool] = None
    ) -> docker_composer.runner.cmd.events.DockerComposeEvents:
        """

        Usage:  docker compose events [OPTIONS] [SERVICE...]

        Receive real time events from containers.


        :param json: Output events as a stream of json objects
        """
        runner = docker_composer.runner.cmd.events.DockerComposeEvents(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def exec(
        self,
        detach: Optional[bool] = None,
        env: Optional[str] = None,
        no_TTY: Optional[str] = None,
        user: Optional[str] = None,
        workdir: Optional[str] = None,
    ) -> docker_composer.runner.cmd.exec.DockerComposeExec:
        """

        Usage:  docker compose exec [OPTIONS] SERVICE COMMAND [ARGS...]

        Execute a command in a running container.


        :param detach: Detached mode: Run command in the
           background.
        :param env: Set environment variables
           --index int                    index of the container if there are
           multiple instances of a service
           [default: 1]. (default 1)
        :param no_TTY: Disable pseudo-TTY allocation. By
           default docker compose exec
           allocates a TTY. (default true)
           --privileged                   Give extended privileges to the process.
        :param user: Run the command as this user.
        :param workdir: Path to workdir directory for this
           command.
        """
        runner = docker_composer.runner.cmd.exec.DockerComposeExec(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def images(
        self, format: Optional[str] = None, quiet: Optional[bool] = None
    ) -> docker_composer.runner.cmd.images.DockerComposeImages:
        """

        Usage:  docker compose images [OPTIONS] [SERVICE...]

        List images used by the created containers


        :param format: Format the output. Values: [table | json].
           (default "table")
        :param quiet: Only display IDs
        """
        runner = docker_composer.runner.cmd.images.DockerComposeImages(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def kill(
        self, remove_orphans: Optional[bool] = None, signal: Optional[str] = None
    ) -> docker_composer.runner.cmd.kill.DockerComposeKill:
        """

        Usage:  docker compose kill [OPTIONS] [SERVICE...]

        Force stop service containers.


        :param remove_orphans: Remove containers for services not defined in
           the Compose file.
        :param signal: SIGNAL to send to the container. (default "SIGKILL")
        """
        runner = docker_composer.runner.cmd.kill.DockerComposeKill(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def logs(
        self,
        follow: Optional[bool] = None,
        tail: Optional[str] = None,
        timestamps: Optional[bool] = None,
    ) -> docker_composer.runner.cmd.logs.DockerComposeLogs:
        """

        Usage:  docker compose logs [OPTIONS] [SERVICE...]

        View output from containers


        :param follow: Follow log output.
           --no-color        Produce monochrome output.
           --no-log-prefix   Don't print prefix in logs.
           --since string    Show logs since timestamp (e.g.
           2013-01-02T13:23:37Z) or relative (e.g. 42m for
           42 minutes)
        :param tail: Number of lines to show from the end of the logs
           for each container. (default "all")
        :param timestamps: Show timestamps.
           --until string    Show logs before a timestamp (e.g.
           2013-01-02T13:23:37Z) or relative (e.g. 42m for
           42 minutes)
        """
        runner = docker_composer.runner.cmd.logs.DockerComposeLogs(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def ls(
        self, all: Optional[bool] = None, quiet: Optional[bool] = None
    ) -> docker_composer.runner.cmd.ls.DockerComposeLs:
        """

        Usage:  docker compose ls [OPTIONS]

        List running compose projects


        :param all: Show all stopped Compose projects
           --filter filter   Filter output based on conditions provided.
           --format string   Format the output. Values: [table | json].
           (default "table")
        :param quiet: Only display IDs.
        """
        runner = docker_composer.runner.cmd.ls.DockerComposeLs(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def pause(
        self,
    ) -> docker_composer.runner.cmd.pause.DockerComposePause:
        """

        Usage:  docker compose pause [SERVICE...]

        Pause services



        """
        runner = docker_composer.runner.cmd.pause.DockerComposePause(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def port(
        self, index: Optional[int] = None
    ) -> docker_composer.runner.cmd.port.DockerComposePort:
        """

        Usage:  docker compose port [OPTIONS] SERVICE PRIVATE_PORT

        Print the public port for a port binding.


        :param index: index of the container if service has multiple
           replicas (default 1)
           --protocol string   tcp or udp (default "tcp")
        """
        runner = docker_composer.runner.cmd.port.DockerComposePort(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def ps(
        self, all: Optional[bool] = None, quiet: Optional[bool] = None
    ) -> docker_composer.runner.cmd.ps.DockerComposePs:
        """

        Usage:  docker compose ps [OPTIONS] [SERVICE...]

        List containers


        :param all: Show all stopped containers (including those
           created by the run command)
           --filter string        Filter services by a property (supported
           filters: status).
           --format string        Format the output. Values: [table | json]
           (default "table")
        :param quiet: Only display IDs
           --services             Display services
           --status stringArray   Filter services by status. Values: [paused |
           restarting | removing | running | dead |
           created | exited]
        """
        runner = docker_composer.runner.cmd.ps.DockerComposePs(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def pull(
        self, ignore_buildable: Optional[bool] = None, quiet: Optional[bool] = None
    ) -> docker_composer.runner.cmd.pull.DockerComposePull:
        """

        Usage:  docker compose pull [OPTIONS] [SERVICE...]

        Pull service images


        :param ignore_buildable: Ignore images that can be built.
           --ignore-pull-failures   Pull what it can and ignores images with
           pull failures.
           --include-deps           Also pull services declared as dependencies.
        :param quiet: Pull without printing progress information.
        """
        runner = docker_composer.runner.cmd.pull.DockerComposePull(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def push(
        self, ignore_push_failures: Optional[bool] = None, quiet: Optional[bool] = None
    ) -> docker_composer.runner.cmd.push.DockerComposePush:
        """

        Usage:  docker compose push [OPTIONS] [SERVICE...]

        Push service images


        :param ignore_push_failures: Push what it can and ignores images with
           push failures
           --include-deps           Also push images of services declared as
           dependencies
        :param quiet: Push without printing progress information
        """
        runner = docker_composer.runner.cmd.push.DockerComposePush(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def restart(
        self, no_deps: Optional[bool] = None, timeout: Optional[int] = None
    ) -> docker_composer.runner.cmd.restart.DockerComposeRestart:
        """

        Usage:  docker compose restart [OPTIONS] [SERVICE...]

        Restart service containers


        :param no_deps: Don't restart dependent services.
        :param timeout: Specify a shutdown timeout in seconds (default 10)
        """
        runner = docker_composer.runner.cmd.restart.DockerComposeRestart(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def rm(
        self,
        force: Optional[bool] = None,
        stop: Optional[bool] = None,
        volumes: Optional[bool] = None,
    ) -> docker_composer.runner.cmd.rm.DockerComposeRm:
        """

        Usage:  docker compose rm [OPTIONS] [SERVICE...]

        Removes stopped service containers

        By default, anonymous volumes attached to containers will not be removed. You
        can override this with -v. To list all volumes, use "docker volume ls".

        Any data which is not in a volume will be lost.


        :param force: Don't ask to confirm removal
        :param stop: Stop the containers, if required, before removing
        :param volumes: Remove any anonymous volumes attached to containers
        """
        runner = docker_composer.runner.cmd.rm.DockerComposeRm(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def run(
        self,
        build: Optional[bool] = None,
        detach: Optional[bool] = None,
        env: Optional[str] = None,
        interactive: Optional[bool] = None,
        label: Optional[str] = None,
        no_TTY: Optional[bool] = None,
        publish: Optional[str] = None,
        user: Optional[str] = None,
        volume: Optional[str] = None,
        workdir: Optional[str] = None,
    ) -> docker_composer.runner.cmd.run.DockerComposeRun:
        """

        Usage:  docker compose run [OPTIONS] SERVICE [COMMAND] [ARGS...]

        Run a one-off command on a service.


        :param build: Build image before starting container.
        :param detach: Run container in background and print
           container ID
           --entrypoint string     Override the entrypoint of the image
        :param env: Set environment variables
        :param interactive: Keep STDIN open even if not attached.
           (default true)
        :param label: Add or override a label
           --name string           Assign a name to the container
        :param no_TTY: Disable pseudo-TTY allocation (default:
           auto-detected). (default true)
           --no-deps               Don't start linked services.
        :param publish: Publish a container's port(s) to the host.
           --quiet-pull            Pull without printing progress information.
           --remove-orphans        Remove containers for services not defined
           in the Compose file.
           --rm                    Automatically remove the container when it exits
           --service-ports         Run command with the service's ports
           enabled and mapped to the host.
           --use-aliases           Use the service's network useAliases in the
           network(s) the container connects to.
        :param user: Run as specified username or uid
        :param volume: Bind mount a volume.
        :param workdir: Working directory inside the container
        """
        runner = docker_composer.runner.cmd.run.DockerComposeRun(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def start(
        self,
    ) -> docker_composer.runner.cmd.start.DockerComposeStart:
        """

        Usage:  docker compose start [SERVICE...]

        Start services



        """
        runner = docker_composer.runner.cmd.start.DockerComposeStart(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def stop(
        self, timeout: Optional[int] = None
    ) -> docker_composer.runner.cmd.stop.DockerComposeStop:
        """

        Usage:  docker compose stop [OPTIONS] [SERVICE...]

        Stop services


        :param timeout: Specify a shutdown timeout in seconds (default 10)
        """
        runner = docker_composer.runner.cmd.stop.DockerComposeStop(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def top(
        self,
    ) -> docker_composer.runner.cmd.top.DockerComposeTop:
        """

        Usage:  docker compose top [SERVICES...]

        Display the running processes



        """
        runner = docker_composer.runner.cmd.top.DockerComposeTop(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def unpause(
        self,
    ) -> docker_composer.runner.cmd.unpause.DockerComposeUnpause:
        """

        Usage:  docker compose unpause [SERVICE...]

        Unpause services



        """
        runner = docker_composer.runner.cmd.unpause.DockerComposeUnpause(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def up(
        self,
        abort_on_container_exit: Optional[bool] = None,
        detach: Optional[bool] = None,
        renew_anon_volumes: Optional[bool] = None,
        waitTimeout: Optional[int] = None,
    ) -> docker_composer.runner.cmd.up.DockerComposeUp:
        """

        Usage:  docker compose up [OPTIONS] [SERVICE...]

        Create and start containers


        :param abort_on_container_exit: Stops all containers if any container
           was stopped. Incompatible with -d
           --always-recreate-deps      Recreate dependent containers.
           Incompatible with --no-recreate.
           --attach stringArray        Attach to service output.
           --attach-dependencies       Attach to dependent containers.
           --build                     Build images before starting containers.
        :param detach: Detached mode: Run containers in the
           background
           --exit-code-from string     Return the exit code of the selected
           service container. Implies
           --abort-on-container-exit
           --force-recreate            Recreate containers even if their
           configuration and image haven't changed.
           --no-attach stringArray     Don't attach to specified service.
           --no-build                  Don't build an image, even if it's missing.
           --no-color                  Produce monochrome output.
           --no-deps                   Don't start linked services.
           --no-log-prefix             Don't print prefix in logs.
           --no-recreate               If containers already exist, don't
           recreate them. Incompatible with
           --force-recreate.
           --no-start                  Don't start the services after creating
           them.
           --pull string               Pull image before running
           ("always"|"missing"|"never") (default
           "missing")
           --quiet-pull                Pull without printing progress information.
           --remove-orphans            Remove containers for services not
           defined in the Compose file.
        :param renew_anon_volumes: Recreate anonymous volumes instead of
           retrieving data from the previous
           containers.
           --scale scale               Scale SERVICE to NUM instances.
           Overrides the scale setting in the
           Compose file if present.
           --timestamps                Show timestamps.
           --wait                      Wait for services to be
           running|healthy. Implies detached mode.
           --wait-timeout int          timeout waiting for application to be
           running|healthy.
        :param waitTimeout: Use this waitTimeout in seconds for
           container shutdown when attached or
           when containers are already running.
           (default 10)
        """
        runner = docker_composer.runner.cmd.up.DockerComposeUp(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner

    def version(
        self, format: Optional[str] = None
    ) -> docker_composer.runner.cmd.version.DockerComposeVersion:
        """

        Usage:  docker compose version [OPTIONS]

        Show the Docker Compose version information


        :param format: Format the output. Values: [pretty | json].
           (Default: pretty)
           --short           Shows only Compose's version number.
        """
        runner = docker_composer.runner.cmd.version.DockerComposeVersion(
            **{k: v for k, v in locals().items() if k != "self"}
        )
        runner._parent_cmd = self._call_cmd()
        return runner
